# -*- coding: utf-8 -*-
"""train_baseline_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CZMGeiO44fsv-iCMZVZP0zeTBfI3Jd1D
"""

# pip install mlflow

import pandas as pd
import numpy as np
import os
import joblib
import mlflow
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from imblearn.over_sampling import SMOTE

df = pd.read_csv("data/Telco-Customer-Churn.csv")
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df.dropna(inplace=True)
df['Churn'] = df['Churn'].map({'Yes': 1, 'No': 0})
df = pd.get_dummies(df, drop_first=True)

os.makedirs("data", exist_ok=True)
df.to_csv("processed_telco.csv", index=False)
print("processed_telco.csv saved successfully!")

ref_df = pd.read_csv("data/processed_telco.csv")
# Split features and target
X = ref_df.drop("Churn", axis=1)
y = ref_df["Churn"]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, stratify=y, test_size=0.2, random_state=42
)
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_res, y_train_res)

y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print("Accuracy:", acc)
print(classification_report(y_test, y_pred))

os.makedirs("models", exist_ok=True)
joblib.dump(model, "models/model_v1.pkl")

mlflow.set_experiment("ML Monitoring Drift Project")
with mlflow.start_run(run_name="baseline_rf_telco"):
    mlflow.log_metric("accuracy", acc)
    mlflow.sklearn.log_model(model, "baseline_model")
    print(f"Logged to MLflow with accuracy: {acc}")

