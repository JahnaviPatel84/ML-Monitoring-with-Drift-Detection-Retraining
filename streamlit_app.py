# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FPIQmB-aEWsNIW__D-izmlBDKXaxAr-B
"""

import streamlit as st
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt
from scipy.stats import ks_2samp
import numpy as np

st.set_page_config(layout="wide")
st.title("ML Monitoring and Drift Detection Dashboard")

# Load reference data and trained model
ref_df = pd.read_csv("data/processed_telco.csv")
model = joblib.load("models/model_v1.pkl")

# Drift Detection Functions
def population_stability_index(expected, actual, bins=10):
    def scale(series): return pd.cut(series, bins=bins, labels=False)
    expected_binned = scale(expected)
    actual_binned = scale(actual)
    expected_dist = pd.Series(expected_binned).value_counts(normalize=True, sort=False)
    actual_dist = pd.Series(actual_binned).value_counts(normalize=True, sort=False)
    psi = np.sum((expected_dist - actual_dist) * np.log((expected_dist + 1e-6) / (actual_dist + 1e-6)))
    return psi

def check_drift(ref_df, new_df, threshold=0.2):
    report = {}
    for col in ref_df.columns:
        if col == "Churn":
            continue
        psi = population_stability_index(ref_df[col], new_df[col])
        ks_pval = ks_2samp(ref_df[col], new_df[col]).pvalue
        report[col] = {
            "PSI": round(psi, 3),
            "KS_p": round(ks_pval, 3),
            "Drift": psi > threshold
        }
    return pd.DataFrame(report).T

# SHAP Explanation Function
def explain_model_prediction(model, X_sample):
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(X_sample)

    st.subheader("SHAP Feature Importance (Global)")
    fig1 = plt.figure()
    shap.summary_plot(shap_values, X_sample, plot_type="bar", show=False)
    st.pyplot(fig1)

    st.subheader("SHAP Explanation for First Row")
    fig2 = plt.figure()
    shap.plots._waterfall.waterfall_legacy(
        explainer.expected_value[1],
        shap_values[1][0],
        X_sample.iloc[0]
    )
    st.pyplot(fig2)

# Upload Section
uploaded_file = st.file_uploader("Upload a new batch CSV file", type="csv")

if uploaded_file:
    new_df = pd.read_csv(uploaded_file)

    st.subheader("Uploaded Data Preview")
    st.dataframe(new_df.head())

    st.subheader("Drift Detection Report")
    drift_report = check_drift(ref_df, new_df)
    st.dataframe(drift_report.sort_values("PSI", ascending=False))

    if any(drift_report["Drift"]):
        st.warning("Drift detected in one or more features. Retraining may be necessary.")
    else:
        st.success("No significant drift detected.")

    st.subheader("Churn Predictions")
    X = new_df.drop("Churn", axis=1) if "Churn" in new_df.columns else new_df
    preds = model.predict(X)
    new_df["Predicted_Churn"] = preds
    st.dataframe(new_df[["Predicted_Churn"]].head())

    with st.expander("SHAP Explanation"):
        explain_model_prediction(model, X)

